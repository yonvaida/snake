// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_SNAKEDATA_SNAKEDATA_H_
#define FLATBUFFERS_GENERATED_SNAKEDATA_SNAKEDATA_H_

#include "flatbuffers/flatbuffers.h"

namespace snakedata {

struct snakepacketdata;

struct snakebodydata;

struct snakefooddata;

struct boarddata;

struct snakebodypoint;

struct snakepacketdata FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ALLSNAKES = 4,
    VT_BOARD = 6,
    VT_SNAKEFOOD = 8,
    VT_GAMESTATUS = 10,
    VT_GAMESCORE = 12,
    VT_NUMBEROFSNAKES = 14
  };
  const flatbuffers::Vector<flatbuffers::Offset<snakebodydata>> *allsnakes() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<snakebodydata>> *>(VT_ALLSNAKES); }
  const boarddata *board() const { return GetPointer<const boarddata *>(VT_BOARD); }
  const snakefooddata *snakefood() const { return GetPointer<const snakefooddata *>(VT_SNAKEFOOD); }
  const flatbuffers::String *gamestatus() const { return GetPointer<const flatbuffers::String *>(VT_GAMESTATUS); }
  int32_t gamescore() const { return GetField<int32_t>(VT_GAMESCORE, 0); }
  int32_t numberofsnakes() const { return GetField<int32_t>(VT_NUMBEROFSNAKES, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ALLSNAKES) &&
           verifier.Verify(allsnakes()) &&
           verifier.VerifyVectorOfTables(allsnakes()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_BOARD) &&
           verifier.VerifyTable(board()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_SNAKEFOOD) &&
           verifier.VerifyTable(snakefood()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_GAMESTATUS) &&
           verifier.Verify(gamestatus()) &&
           VerifyField<int32_t>(verifier, VT_GAMESCORE) &&
           VerifyField<int32_t>(verifier, VT_NUMBEROFSNAKES) &&
           verifier.EndTable();
  }
};

struct snakepacketdataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_allsnakes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<snakebodydata>>> allsnakes) { fbb_.AddOffset(snakepacketdata::VT_ALLSNAKES, allsnakes); }
  void add_board(flatbuffers::Offset<boarddata> board) { fbb_.AddOffset(snakepacketdata::VT_BOARD, board); }
  void add_snakefood(flatbuffers::Offset<snakefooddata> snakefood) { fbb_.AddOffset(snakepacketdata::VT_SNAKEFOOD, snakefood); }
  void add_gamestatus(flatbuffers::Offset<flatbuffers::String> gamestatus) { fbb_.AddOffset(snakepacketdata::VT_GAMESTATUS, gamestatus); }
  void add_gamescore(int32_t gamescore) { fbb_.AddElement<int32_t>(snakepacketdata::VT_GAMESCORE, gamescore, 0); }
  void add_numberofsnakes(int32_t numberofsnakes) { fbb_.AddElement<int32_t>(snakepacketdata::VT_NUMBEROFSNAKES, numberofsnakes, 0); }
  snakepacketdataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  snakepacketdataBuilder &operator=(const snakepacketdataBuilder &);
  flatbuffers::Offset<snakepacketdata> Finish() {
    auto o = flatbuffers::Offset<snakepacketdata>(fbb_.EndTable(start_, 6));
    return o;
  }
};

inline flatbuffers::Offset<snakepacketdata> Createsnakepacketdata(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<snakebodydata>>> allsnakes = 0,
   flatbuffers::Offset<boarddata> board = 0,
   flatbuffers::Offset<snakefooddata> snakefood = 0,
   flatbuffers::Offset<flatbuffers::String> gamestatus = 0,
   int32_t gamescore = 0,
   int32_t numberofsnakes = 0) {
  snakepacketdataBuilder builder_(_fbb);
  builder_.add_numberofsnakes(numberofsnakes);
  builder_.add_gamescore(gamescore);
  builder_.add_gamestatus(gamestatus);
  builder_.add_snakefood(snakefood);
  builder_.add_board(board);
  builder_.add_allsnakes(allsnakes);
  return builder_.Finish();
}

struct snakebodydata FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SNAKEBODY = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<snakebodypoint>> *snakebody() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<snakebodypoint>> *>(VT_SNAKEBODY); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_SNAKEBODY) &&
           verifier.Verify(snakebody()) &&
           verifier.VerifyVectorOfTables(snakebody()) &&
           verifier.EndTable();
  }
};

struct snakebodydataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_snakebody(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<snakebodypoint>>> snakebody) { fbb_.AddOffset(snakebodydata::VT_SNAKEBODY, snakebody); }
  snakebodydataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  snakebodydataBuilder &operator=(const snakebodydataBuilder &);
  flatbuffers::Offset<snakebodydata> Finish() {
    auto o = flatbuffers::Offset<snakebodydata>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<snakebodydata> Createsnakebodydata(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<snakebodypoint>>> snakebody = 0) {
  snakebodydataBuilder builder_(_fbb);
  builder_.add_snakebody(snakebody);
  return builder_.Finish();
}

struct snakefooddata FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_X = 4,
    VT_Y = 6
  };
  int32_t x() const { return GetField<int32_t>(VT_X, 0); }
  int32_t y() const { return GetField<int32_t>(VT_Y, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_X) &&
           VerifyField<int32_t>(verifier, VT_Y) &&
           verifier.EndTable();
  }
};

struct snakefooddataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(int32_t x) { fbb_.AddElement<int32_t>(snakefooddata::VT_X, x, 0); }
  void add_y(int32_t y) { fbb_.AddElement<int32_t>(snakefooddata::VT_Y, y, 0); }
  snakefooddataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  snakefooddataBuilder &operator=(const snakefooddataBuilder &);
  flatbuffers::Offset<snakefooddata> Finish() {
    auto o = flatbuffers::Offset<snakefooddata>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<snakefooddata> Createsnakefooddata(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t x = 0,
   int32_t y = 0) {
  snakefooddataBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct boarddata FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_WIDTH = 4,
    VT_HEIGHT = 6
  };
  int32_t width() const { return GetField<int32_t>(VT_WIDTH, 0); }
  int32_t height() const { return GetField<int32_t>(VT_HEIGHT, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_WIDTH) &&
           VerifyField<int32_t>(verifier, VT_HEIGHT) &&
           verifier.EndTable();
  }
};

struct boarddataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_width(int32_t width) { fbb_.AddElement<int32_t>(boarddata::VT_WIDTH, width, 0); }
  void add_height(int32_t height) { fbb_.AddElement<int32_t>(boarddata::VT_HEIGHT, height, 0); }
  boarddataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  boarddataBuilder &operator=(const boarddataBuilder &);
  flatbuffers::Offset<boarddata> Finish() {
    auto o = flatbuffers::Offset<boarddata>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<boarddata> Createboarddata(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t width = 0,
   int32_t height = 0) {
  boarddataBuilder builder_(_fbb);
  builder_.add_height(height);
  builder_.add_width(width);
  return builder_.Finish();
}

struct snakebodypoint FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_X = 4,
    VT_Y = 6
  };
  int32_t x() const { return GetField<int32_t>(VT_X, 0); }
  int32_t y() const { return GetField<int32_t>(VT_Y, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_X) &&
           VerifyField<int32_t>(verifier, VT_Y) &&
           verifier.EndTable();
  }
};

struct snakebodypointBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(int32_t x) { fbb_.AddElement<int32_t>(snakebodypoint::VT_X, x, 0); }
  void add_y(int32_t y) { fbb_.AddElement<int32_t>(snakebodypoint::VT_Y, y, 0); }
  snakebodypointBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  snakebodypointBuilder &operator=(const snakebodypointBuilder &);
  flatbuffers::Offset<snakebodypoint> Finish() {
    auto o = flatbuffers::Offset<snakebodypoint>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<snakebodypoint> Createsnakebodypoint(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t x = 0,
   int32_t y = 0) {
  snakebodypointBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

inline const snakedata::snakepacketdata *Getsnakepacketdata(const void *buf) { return flatbuffers::GetRoot<snakedata::snakepacketdata>(buf); }

inline bool VerifysnakepacketdataBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<snakedata::snakepacketdata>(); }

inline void FinishsnakepacketdataBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<snakedata::snakepacketdata> root) { fbb.Finish(root); }

}  // namespace snakedata

#endif  // FLATBUFFERS_GENERATED_SNAKEDATA_SNAKEDATA_H_
